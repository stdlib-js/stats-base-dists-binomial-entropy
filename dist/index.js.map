{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 100, 0.1 );\n* // returns ~2.511\n*\n* @example\n* var v = entropy( 20, 0.5 );\n* // returns ~2.223\n*\n* @example\n* var v = entropy( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 20, NaN );\n* // returns NaN\n*/\nfunction entropy( n, p ) {\n\tvar nlq;\n\tvar out;\n\tvar i;\n\tvar q;\n\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0 || p === 1 || n === 0 ) {\n\t\treturn 0.0;\n\t}\n\tq = 1.0 - p;\n\tnlq = n * ln( q );\n\tout = exp( nlq ) * nlq;\n\tfor ( i = 1; i <= n; i++ ) {\n\t\tnlq += ln( ( n - i + 1 ) / i ) + ln( p / q );\n\t\tout += exp( nlq ) * nlq;\n\t}\n\treturn -out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = entropy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution entropy.\n*\n* @module @stdlib/stats-base-dists-binomial-entropy\n*\n* @example\n* var entropy = require( '@stdlib/stats-base-dists-binomial-entropy' );\n*\n* var v = entropy( 100, 0.1 );\n* // returns ~2.511\n*\n* v = entropy( 20, 0.5 );\n* // returns ~2.223\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,iDAAkD,EAClFC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EAgCrD,SAASC,EAASC,EAAGC,EAAI,CACxB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GACCV,EAAOK,CAAE,GACTL,EAAOM,CAAE,GACTA,EAAI,GACJA,EAAI,GACJ,CAACP,EAAsBM,CAAE,GACzBA,IAAMF,EAEN,MAAO,KAER,GAAKG,IAAM,GAAKA,IAAM,GAAKD,IAAM,EAChC,MAAO,GAKR,IAHAK,EAAI,EAAMJ,EACVC,EAAMF,EAAIH,EAAIQ,CAAE,EAChBF,EAAMP,EAAKM,CAAI,EAAIA,EACbE,EAAI,EAAGA,GAAKJ,EAAGI,IACpBF,GAAOL,GAAMG,EAAII,EAAI,GAAMA,CAAE,EAAIP,EAAII,EAAII,CAAE,EAC3CF,GAAOP,EAAKM,CAAI,EAAIA,EAErB,MAAO,CAACC,CACT,CAKAV,EAAO,QAAUM,ICrDjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isnan", "exp", "ln", "PINF", "entropy", "n", "p", "nlq", "out", "i", "q", "main"]
}
